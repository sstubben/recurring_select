window.RecurringSelectDialog =
  class RecurringSelectDialog
    constructor: (@recurring_selector) ->
      @current_rule = @recurring_selector.recurring_select('current_rule')
      @position = @recurring_selector.data('recurring-select-position')
      @initDialogBox()
      if not @current_rule.hash? or not @current_rule.hash.rule_type?
        @freqChanged()
      else if @position != 'inline'
        setTimeout @positionDialogVert, 10 # allow initial render

    initDialogBox: ->
      $(".rs_dialog_holder").remove()

      open_in = if @position == 'inline'
        @recurring_selector.parent()
      else
        $("body")
      open_in = $(".ui-page-active") if $(".ui-page-active").length
      open_in.append @template()
      @outer_holder = $(".rs_dialog_holder")
      @outer_holder.addClass @position
      @inner_holder = @outer_holder.find ".rs_dialog"
      @content = @outer_holder.find ".rs_dialog_content"
      @positionDialogVert(true) unless @position == 'inline'
      @mainEventInit()
      @freqInit()
      @summaryInit()
      @untilInit()
      @outer_holder.trigger "recurring_select:dialog_opened"
      @freq_select.focus()

    positionDialogVert: (initial_positioning) =>
      window_height = $(window).height()
      window_width  = $(window).width()
      dialog_height = @content.outerHeight()
      if dialog_height < 80
        dialog_height = 80
      margin_top = (window_height - dialog_height)/2 - 30
      margin_top = 10 if margin_top < 10
      # if dialog_height > window_height - 20
      #   dialog_height = window_height - 20

      new_style_hash =
        #"margin-top" : margin_top+"px"
        "min-height" : dialog_height+"px"

      if initial_positioning?
        @inner_holder.css new_style_hash
        @inner_holder.trigger "recurring_select:dialog_positioned"
      else
        @inner_holder.addClass "animated"
        @inner_holder.animate new_style_hash, 200, =>
          @inner_holder.removeClass "animated"
          @content.css {"width": "auto"}
          @inner_holder.trigger "recurring_select:dialog_positioned"

    cancel: (e) =>
      e.preventDefault() if e
      @outer_holder.remove()
      @recurring_selector.recurring_select('cancel')
      $('body').off('click.recurring_select_cancel')

    outerCancel: (event) =>
      if $.fn.recurring_select.options.close_on_outside_click && $(event.target).hasClass("rs_dialog_holder")
        @cancel()

    save: =>
      return if !@current_rule.str?
      valid = true
      
      if @current_rule.hash?.rule_type == 'IceCube::WeeklyRule' && !@current_rule.hash?.validations?
        @content.find('.weekly_options').addClass 'rs_error'
        valid = false
      
      if @current_rule.hash?.rule_type == 'IceCube::MonthlyRule'
        week_mode = @content.find(".monthly_rule_type_week").prop("checked")
        
        if week_mode && $.isEmptyObject(@current_rule.hash?.validations.day_of_week)
          @content.find('.monthly_options .rs_calendar_week').addClass 'rs_error'
          valid = false
        else if !week_mode && @current_rule.hash?.validations.day_of_month.length < 1
          @content.find('.monthly_options .rs_calendar_day').addClass 'rs_error'
          valid = false
        
        
      if !$.fn.recurring_select.options.indefinite_until && $.fn.recurring_select.options.until && !@current_rule.hash?.until?
        @content.find('input.rs_until').addClass 'rs_error'
        valid = false
      
      if !valid
        return false
        
      @outer_holder.remove()
      @recurring_selector.recurring_select('save', @current_rule)
      $('body').off('click.recurring_select_cancel')

# ========================= Init Methods ===============================

    mainEventInit: ->
      # Tap hooks are for jQueryMobile
      @outer_holder.on 'click tap', @outerCancel
      @content.on 'click tap', 'h1 a', @cancel
      @save_button = @content.find('input.rs_save').on "click tap", @save
      @content.find('input.rs_cancel').on "click tap", @cancel
      @content.find('input.rs_until').on "change", @untilChanged
      @content.find('input.rs_indefinite').on 'change tap', @indefiniteChanged

    freqInit: ->
      @freq_select = @outer_holder.find ".rs_frequency"
      if @current_rule.hash? && (rule_type = @current_rule.hash.rule_type)?
        if rule_type.search(/Weekly/) != -1
          @freq_select.prop('selectedIndex', 1)
          @initWeeklyOptions()
        else if rule_type.search(/Monthly/) != -1
          @freq_select.prop('selectedIndex', 2)
          @initMonthlyOptions()
        else if rule_type.search(/Yearly/) != -1
          @freq_select.prop('selectedIndex', 3)
          @initYearlyOptions()
        else
          @initDailyOptions()
      @freq_select.on "change", @freqChanged

    initDailyOptions: ->
      section = @content.find('.daily_options')
      interval_input = section.find('.rs_daily_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged
      section.show()

    initWeeklyOptions: ->
      section = @content.find('.weekly_options')

      # connect the interval field
      interval_input = section.find('.rs_weekly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged

      # clear selected days
      section.find(".day_holder a").each (index, element) ->
        $(element).removeClass("selected")

      # connect the day fields
      if @current_rule.hash.validations? && @current_rule.hash.validations.day?
        $(@current_rule.hash.validations.day).each (index, val) ->
          section.find(".day_holder a[data-value='"+val+"']").addClass("selected")

      section.off('click', '.day_holder a').on "click", ".day_holder a", @daysChanged

      section.show()

    initMonthlyOptions: ->
      section = @content.find('.monthly_options')
      interval_input = section.find('.rs_monthly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged

      @current_rule.hash.validations ||= {}
      @current_rule.hash.validations.day_of_month ||= []
      @current_rule.hash.validations.day_of_week ||= {}
      @init_calendar_days(section)
      @init_calendar_weeks(section)

      in_week_mode = Object.keys(@current_rule.hash.validations.day_of_week).length > 0
      section.find(".monthly_rule_type_week").prop("checked", in_week_mode)
      section.find(".monthly_rule_type_day").prop("checked", !in_week_mode)
      @toggle_month_view()
      section.find("input[name=monthly_rule_type]").on "change", @toggle_month_view
      section.show()

    initYearlyOptions: ->
      section = @content.find('.yearly_options')
      interval_input = section.find('.rs_yearly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged
      section.show()


    summaryInit: ->
      @summary = @outer_holder.find(".rs_summary")
      @summaryUpdate()

# ========================= render methods ===============================

    summaryUpdate: (new_string) =>
      @summary.width @content.width()
      if @current_rule.hash? && @current_rule.str?
        @summary.removeClass "fetching"
        @save_button.removeClass("disabled")
        rule_str = @current_rule.str.replace("*", "")
        if rule_str.length < 20
          rule_str = "#{$.fn.recurring_select.texts["summary"]}: "+rule_str
        @summary.find("span").html rule_str
      else
        @summary.addClass "fetching"
        @save_button.addClass("disabled")
        @summary.find("span").html ""
        @summaryFetch()

    summaryFetch: ->
      return if !(@current_rule.hash? && (rule_type = @current_rule.hash.rule_type)?)
      @current_rule.hash['week_start'] = $.fn.recurring_select.texts["first_day_of_week"]
      $.ajax
        url: "<%= Rails.application.config.action_controller.relative_url_root %>/recurring_select/translate/#{$.fn.recurring_select.texts["locale_iso_code"]}",
        type: "POST",
        data: @current_rule.hash
        success: @summaryFetchSuccess

    summaryFetchSuccess: (data) =>
      @current_rule.str = data
      @summaryUpdate()
      @content.css {"width": "auto"}
    
    untilInit: =>
      @content.find('input.rs_until').datepicker
        firstDay: $.fn.recurring_select.options.datepicker.firstDay
        dateFormat: '<%= RecurringSelect.datepicker_format %>'
        beforeShowDay: $.fn.recurring_select.options.datepicker.beforeShowDayFunction
        onSelect: (date) =>
          @setUntil date
      .val @current_rule.hash?.until
      if $.fn.recurring_select.options.indefinite_until
        @content.find('input.rs_indefinite').click() if @current_rule.hash?.until?
    
    init_calendar_days: (section) =>
      monthly_calendar = section.find(".rs_calendar_day")
      monthly_calendar.html ""
      for num in [1..31]
        monthly_calendar.append (day_link = $(document.createElement("a")).text(num))
        if $.inArray(num, @current_rule.hash.validations.day_of_month) != -1
          day_link.addClass("selected")

      # add last day of month button
      monthly_calendar.append (end_of_month_link = $(document.createElement("a")).text($.fn.recurring_select.texts["last_day"]))
      end_of_month_link.addClass("end_of_month")
      if $.inArray(-1, @current_rule.hash.validations.day_of_month) != -1
        end_of_month_link.addClass("selected")

      monthly_calendar.find("a").on "click tap", @dateOfMonthChanged

    init_calendar_weeks: (section) =>
      monthly_calendar = section.find(".rs_calendar_week")
      monthly_calendar.html ""
      row_labels = $.fn.recurring_select.texts["order"]
      show_row = $.fn.recurring_select.options["monthly"]["show_week"]
      cell_str = $.fn.recurring_select.texts["days_first_letter"]

      for num, index in [1, 2, 3, 4, 5, -1]
        if show_row[index]
          monthly_calendar.append "<span>#{row_labels[num - 1]}</span>"
          for day_of_week in [$.fn.recurring_select.texts["first_day_of_week"]...(7 + $.fn.recurring_select.texts["first_day_of_week"])]
            day_of_week = day_of_week % 7
            day_link = $("<a>", {text: cell_str[day_of_week] })
            day_link.attr("day", day_of_week)
            day_link.attr("instance", num)
            monthly_calendar.append day_link

      $.each @current_rule.hash.validations.day_of_week, (key, value) ->
        $.each value, (index, instance) ->
          section.find("a[day='#{key}'][instance='#{instance}']").addClass("selected")
      monthly_calendar.find("a").on "click tap", @weekOfMonthChanged

    toggle_month_view: =>
      week_mode = @content.find(".monthly_rule_type_week").prop("checked")
      @content.find(".rs_calendar_week").toggle(week_mode)
      @content.find(".rs_calendar_day").toggle(!week_mode)

# ========================= Change callbacks ===============================

    freqChanged: =>
      old_until = @current_rule.hash?.until
      @current_rule.hash = null unless $.isPlainObject(@current_rule.hash) # for custom values

      @current_rule.hash ||= {}
      @current_rule.hash.interval = 1
      @current_rule.hash.until = old_until
      @current_rule.hash.count = null
      @current_rule.hash.validations = null
      @content.find(".freq_option_section").hide();
      @content.find("input[type=radio], input[type=checkbox]:not(.rs_indefinite)").prop("checked", false)
      switch @freq_select.val()
        when "Weekly"
          @current_rule.hash.rule_type = "IceCube::WeeklyRule"
          @current_rule.str = $.fn.recurring_select.texts["weekly"]
          @initWeeklyOptions()
        when "Monthly"
          @current_rule.hash.rule_type = "IceCube::MonthlyRule"
          @current_rule.str = $.fn.recurring_select.texts["monthly"]
          @initMonthlyOptions()
        when "Yearly"
          @current_rule.hash.rule_type = "IceCube::YearlyRule"
          @current_rule.str = $.fn.recurring_select.texts["yearly"]
          @initYearlyOptions()
        else
          @current_rule.hash.rule_type = "IceCube::DailyRule"
          @current_rule.str = $.fn.recurring_select.texts["daily"]
          @initDailyOptions()
      @current_rule.str = null
      @summaryUpdate()
      @positionDialogVert() unless @position == 'inline'
    
    intervalChanged: (event) =>
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.interval = parseInt($(event.currentTarget).val())
      if @current_rule.hash.interval < 1 || isNaN(@current_rule.hash.interval)
        @current_rule.hash.interval = 1
      @summaryUpdate()

    daysChanged: (event) =>
      $(event.currentTarget).toggleClass("selected")
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      raw_days = @content.find(".day_holder a.selected").map -> parseInt($(this).data("value"))
      
      if raw_days.length > 0
        @content.find(".weekly_options").removeClass('rs_error')
        
      @current_rule.hash.validations.day = raw_days.get()
      @summaryUpdate()
      false # this prevents default and propogation

    dateOfMonthChanged: (event) =>
      $(event.currentTarget).toggleClass("selected")
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      raw_days = @content.find(".monthly_options .rs_calendar_day a.selected").map ->
        res = if $(this).text() == $.fn.recurring_select.texts["last_day"] then -1 else parseInt($(this).text())
        res
      
      if raw_days.length > 0
        @content.find(".monthly_options .rs_calendar_day").removeClass('rs_error')
        
      @current_rule.hash.validations.day_of_week = {}
      @current_rule.hash.validations.day_of_month = raw_days.get()
      @summaryUpdate()
      false

    weekOfMonthChanged: (event) =>
      $(event.currentTarget).toggleClass("selected")
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      @current_rule.hash.validations.day_of_month = []
      @current_rule.hash.validations.day_of_week = {}
      raw_days = @content.find(".monthly_options .rs_calendar_week a.selected")
      raw_days.each (index, elm) =>
        day = parseInt($(elm).attr("day"))
        instance = parseInt($(elm).attr("instance"))
        @current_rule.hash.validations.day_of_week[day] ||= []
        @current_rule.hash.validations.day_of_week[day].push instance
        
      if raw_days.length > 0
        @content.find(".monthly_options .rs_calendar_week").removeClass('rs_error')
        
      @summaryUpdate()
      false

    untilChanged: (event) =>
       @setUntil $(event.currentTarget).val()
    
    setUntil: (date) ->
      @current_rule.hash ||= {}
      @current_rule.str = null
      @current_rule.hash.until = date
      @summaryUpdate()
      false
    
    indefiniteChanged: (event) =>
      $el = $(event.currentTarget)
      $untilSection = $el.parents('.until_option').find('.until_input')
      $untilInput = $untilSection.find 'input.rs_until'
      if $el.is ':checked'
        $untilInput.val('').blur()
        $untilSection.hide()
        if @current_rule.hash
          delete @current_rule.hash.until
        delete @current_rule.str
      else
        if @current_rule.hash?.until
          $untilInput.val @current_rule.hash.until
        else
          $untilInput.datepicker('setDate', @getUntilDefaultDate())
            .focus
        $untilInput.blur()
        $untilSection.show()
      @summaryUpdate()
    
    getUntilDefaultDate: =>
      today = new Date
      year = today.getFullYear()
      month = today.getMonth()
      day = today.getDate()
      switch @current_rule.hash.rule_type
        when "IceCube::MonthlyRule" then new Date year + 1, month, day
        when "IceCube::YearlyRule" then new Date year + 5, month, day
        when "IceCube::WeeklyRule" then new Date year, month + 1, day
        else new Date year, month, day + 7

# ========================= Change callbacks ===============================

    template: () ->
      str = "
      <div class='rs_dialog_holder'>
        <div class='rs_dialog'>
          <div class='rs_dialog_content'>
            <h1>#{$.fn.recurring_select.texts["repeat"]} <a href='#' title='#{$.fn.recurring_select.texts["cancel"]}' Alt='#{$.fn.recurring_select.texts["cancel"]}'></a> </h1>
            <p class='frequency-select-wrapper form-item form-item-small'>
              <label for='rs_frequency' class='form-label'>#{$.fn.recurring_select.texts["frequency"]}:</label>
              <select data-wrapper-class='ui-recurring-select' id='rs_frequency' class='rs_frequency form-select' name='rs_frequency'>
                <option value='Daily'>#{$.fn.recurring_select.texts["daily"]}</option>
                <option value='Weekly'>#{$.fn.recurring_select.texts["weekly"]}</option>
                <option value='Monthly'>#{$.fn.recurring_select.texts["monthly"]}</option>
                <option value='Yearly'>#{$.fn.recurring_select.texts["yearly"]}</option>
              </select>
            </p>

            <div class='daily_options freq_option_section'>
              <p class='every form-item form-item-small'>
                <label for='rs_daily_interval' class='form-label'>#{$.fn.recurring_select.texts["settings"]}</label>
                #{$.fn.recurring_select.texts["every"]}
                <select data-wrapper-class='ui-recurring-select' name='rs_daily_interval' class='form-select rs_daily_interval rs_interval'>
                  <option>1</option>
                  <option>2</option>
                  <option>3</option>
                  <option>4</option>
                  <option>5</option>
                  <option>6</option>
                  <option>7</option>
                  <option>8</option>
                  <option>9</option>
                  <option>10</option>
                  <option>11</option>
                  <option>12</option>
                  <option>13</option>
                  <option>14</option>
                  <option>15</option>
                  <option>16</option>
                  <option>17</option>
                  <option>18</option>
                  <option>19</option>
                  <option>20</option>
                  <option>21</option>
                </select>
                #{$.fn.recurring_select.texts["days"]}
              </p>
            </div>
            <div class='weekly_options freq_option_section'>
              <p class='every form-item form-item-small'>
                <label for='rs_weekly_interval' class='form-label'>#{$.fn.recurring_select.texts["settings"]}</label>
                #{$.fn.recurring_select.texts["every"]}
                <select data-wrapper-class='ui-recurring-select' name='rs_weekly_interval' class='form-select rs_weekly_interval rs_interval'>
                  <option>1</option>
                  <option>2</option>
                  <option>3</option>
                  <option>4</option>
                  <option>5</option>
                  <option>6</option>
                  <option>7</option>
                  <option>8</option>
                  <option>9</option>
                  <option>10</option>
                  <option>11</option>
                  <option>12</option>
                </select>
                #{$.fn.recurring_select.texts["weeks_on"]}:
              </p>
              <div class='day_holder'>
      "
      for day_of_week in [$.fn.recurring_select.texts["first_day_of_week"]...(7 + $.fn.recurring_select.texts["first_day_of_week"])]
        day_of_week = day_of_week % 7
        str += "<a href='#' data-value='#{day_of_week}'>#{$.fn.recurring_select.texts["days_first_letter"][day_of_week]}</a>"

      str += "
              </div>
              <span style='clear:both; visibility:hidden; height:1px;'>.</span>
            </div>
            <div class='monthly_options freq_option_section'>
              <p class='every form-item form-item-small'>
                <label for='rs_monthly_interval' class='form-label'>#{$.fn.recurring_select.texts["settings"]}</label>
                #{$.fn.recurring_select.texts["every"]}
                <select data-wrapper-class='ui-recurring-select' name='rs_monthly_interval' class='form-select rs_monthly_interval rs_interval'>
                  <option>1</option>
                  <option>2</option>
                  <option>3</option>
                  <option>4</option>
                  <option>5</option>
                  <option>6</option>
                  <option>7</option>
                  <option>8</option>
                  <option>9</option>
                  <option>10</option>
                  <option>11</option>
                  <option>12</option>
                </select>
                #{$.fn.recurring_select.texts["months"]}:
              </p>
              <p class='monthly_rule_type'>
                <span><label for='monthly_rule_type_day'>#{$.fn.recurring_select.texts["day_of_month"]}</label><input type='radio' class='monthly_rule_type_day' name='monthly_rule_type' id='monthly_rule_type_day' value='true' /></span>
                <span><label for='monthly_rule_type_week'>#{$.fn.recurring_select.texts["day_of_week"]}</label><input type='radio' class='monthly_rule_type_week' name='monthly_rule_type' id='monthly_rule_type_week' value='true' /></span>
              </p>
              <p class='rs_calendar_day'></p>
              <p class='rs_calendar_week'></p>
            </div>
            <div class='yearly_options freq_option_section'>
              <p class='every form-item form-item-small'>
                <label for='rs_yearly_interval' class='form-label'>#{$.fn.recurring_select.texts["settings"]}</label>
                #{$.fn.recurring_select.texts["every"]}
                <select data-wrapper-class='ui-recurring-select' name='rs_yearly_interval' class='form-select rs_yearly_interval rs_interval'>
                  <option>1</option>
                  <option>2</option>
                  <option>3</option>
                  <option>4</option>
                  <option>5</option>
                  <option>6</option>
                  <option>7</option>
                  <option>8</option>
                  <option>9</option>
                  <option>10</option>
                  <option>11</option>
                  <option>12</option>
                </select>
                #{$.fn.recurring_select.texts["years"]}
              </p>
            </div>"
            
      if $.fn.recurring_select.options.until
 
        str +="<div class='until_option'>"
          
        if $.fn.recurring_select.options.indefinite_until
          str +="<p class='indefinite_input'>
                  <label for='indefinite'>
                    <input id='indefinite' class='rs_indefinite' type='checkbox' checked='checked' />
                    #{$.fn.recurring_select.texts["repeats_indefinitely"]}
                  </label>
                </p>"
        
        
        str += "<p class='until_input form-item form-item-small'>
                <label for='until' class='form-label'>#{$.fn.recurring_select.texts["until"]}</label>
                <input id='until' type='text' name='rs_until' readonly size='15' class='rs_until date form-input' />
              </p>
            </div>"
            
      str += "
            <p class='rs_summary'>
              <span></span>
            </p>
            <div class='controls'>
              <input type='button' data-wrapper-class='ui-recurring-select' class='rs_save' value='#{$.fn.recurring_select.texts["ok"]}' />
              <input type='button' data-wrapper-class='ui-recurring-select' class='rs_cancel' value='#{$.fn.recurring_select.texts["cancel"]}' />
            </div>
          </div>
        </div>
      </div>
      "